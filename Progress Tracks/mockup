def initialize_board():
    board = [
        [0, 2, 0, 2, 0, 2, 0, 2],
        [2, 0, 2, 0, 2, 0, 2, 0],
        [0, 2, 0, 2, 0, 2, 0, 2],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [1, 0, 1, 0, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 1, 0, 1],
        [1, 0, 1, 0, 1, 0, 1, 0]
    ]
    return board

def print_board(board):
    for row in board:
        print(row)

def whoseMove():
    return "white"

def isWon():
    return None

def parseMove(move):
    moves = move.split()
    parsed_moves = []
    if len(moves) % 2 != 0:
        raise ValueError("Invalid set of coordinates: Each move must have a source and destination coordinate.")
    for i in range(0, len(moves), 2):
        from_coord = (int(moves[i][0]), int(moves[i][1]))
        to_coord = (int(moves[i + 1][0]), int(moves[i + 1][1]))
        parsed_moves.append((from_coord, to_coord))
    return parsed_moves

def determine_direction(from_coord, to_coord):
    # Determine movement direction based on coordinates
    if from_coord[0] < to_coord[0]:
        return "down"  # Moving down the board
    else:
        return "up"  # Moving up the board

def determine_active_and_enemy(board, current_player):
    active_pieces = []
    enemy_pieces = []
    for i in range(len(board)):
        for j in range(len(board[i])):
            if board[i][j] == 1 and current_player == "white":
                active_pieces.append((i, j))
            elif board[i][j] == 2 and current_player == "red":
                active_pieces.append((i, j))
            elif board[i][j] == 2 and current_player == "white":
                enemy_pieces.append((i, j))
            elif board[i][j] == 1 and current_player == "red":
                enemy_pieces.append((i, j))
    return active_pieces, enemy_pieces

def checkWinner(board):
    white_count = sum(row.count(1) for row in board)
    red_count = sum(row.count(2) for row in board)
    if white_count == 0:
        return "red"
    elif red_count == 0:
        return "white"
    else:
        return None

def isValidMove(board, parsed_move, current_player):
    for move in parsed_move:
        from_coord, to_coord = move
        from_row, from_col = from_coord
        to_row, to_col = to_coord
        
        # Check if the move is within the bounds of the board
        if not (0 <= from_row < 8 and 0 <= from_col < 8 and 0 <= to_row < 8 and 0 <= to_col < 8):
            return False
        
        # Check if the source position contains the current player's piece
        if current_player == "white" and board[from_row][from_col] != 1:
            return False
        elif current_player == "red" and board[from_row][from_col] != 2:
            return False
        
        # Check if the destination position is empty
        if board[to_row][to_col] != 0:
            return False
        
        # Check if the move is diagonal
        if abs(to_row - from_row) != 1 or abs(to_col - from_col) != 1:
            return False
        
        # Check if the move is forward for regular pieces
        if current_player == "white" and to_row <= from_row:
            return False
        elif current_player == "red" and to_row >= from_row:
            return False
    
    # All checks passed, the move is valid
    return True

def move(board, parsed_move, current_player):
    # Update board
    for move in parsed_move:
        from_coord, to_coord = move
        from_row, from_col = from_coord
        to_row, to_col = to_coord
        board[to_row][to_col] = board[from_row][from_col]
        board[from_row][from_col] = 0

    # Switch turns
    current_player = "red" if current_player == "white" else "white"

    # Check if the game is won
    winner = checkWinner(board)
    
    return board, current_player, winner

def main():
    # Initialize the board
    checkers_board = initialize_board()
    
    # Print the initial board
    print("Initial board:")
    print_board(checkers_board)

    # Determine whose move it is
    current_player = whoseMove()
    print("Whose move is it?", current_player)

    # Check if the game has been won
    print("Is the game won?", isWon())

    # Parse user move
    user_move = input("Enter your move (e.g., '01 23 45'): ")
    parsed_move = parseMove(user_move)
    print("Parsed move:", parsed_move)

    # Check if the move is valid
    if isValidMove(checkers_board, parsed_move, current_player):
        # Execute move
        checkers_board, current_player, winner = move(checkers_board, parsed_move, current_player)
        print("Updated board:")
        print_board(checkers_board)

        # Check for winner
        if winner:
            print(f"The winner is {winner}!")
        else:
            print("No winner yet.")
    else:
        print("Invalid move. Please try again.")

if __name__ == "__main__":
    main()
